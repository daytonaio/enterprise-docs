/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/cluster": {
    get: operations["clusterGetClusters"];
    post: operations["clusterCreateCluster"];
  };
  "/cluster/{clusterId}": {
    get: operations["clusterGetCluster"];
    delete: operations["clusterDeleteCluster"];
  };
  "/user/environment-variables": {
    get: operations["userGetUserEnvironmentVariableList"];
    post: operations["userCreateUserEnvironmentVariable"];
  };
  "/user/ssh-keys": {
    get: operations["userGetUserSshKeys"];
    post: operations["userCreateUserSshKey"];
  };
  "/user": {
    get: operations["userGetUser"];
    delete: operations["userDeleteUser"];
  };
  "/user/environment-variables/{name}": {
    put: operations["userUpdateUserEnvironmentVariable"];
    delete: operations["userDeleteUserEnvironmentVariable"];
  };
  "/user/ssh-keys/{id}": {
    delete: operations["userDeleteUserSshKey"];
  };
  "/user/public-key": {
    get: operations["userGetPublicSshKey"];
  };
  "/user/git-namespaces/{provider}": {
    get: operations["userGetUserGitNamespaces"];
  };
  "/user/git-repos/{provider}/{namespaceId}": {
    get: operations["userGetUserGitRepos"];
  };
  "/user/default-ide": {
    put: operations["userUpdateUserDefaultIde"];
  };
  "/user/dotfiles-repository": {
    put: operations["userUpdateUserDotfilesRepositoryUrl"];
  };
  "/workspace": {
    get: operations["workspaceGetWorkspaceList"];
    post: operations["workspaceCreateWorkspace"];
  };
  "/workspace/{id}/destroy": {
    delete: operations["workspaceDestroyWorkspace"];
  };
  "/workspace/{id}": {
    get: operations["workspaceGetWorkspace"];
  };
  "/workspace/{id}/shared": {
    get: operations["workspaceIsWorkspaceShared"];
  };
  "/workspace/{id}/pin": {
    post: operations["workspacePinWorkspace"];
  };
  "/workspace/{id}/share": {
    post: operations["workspaceShareWorkspace"];
  };
  "/workspace/{id}/unpin": {
    post: operations["workspaceUnpinWorkspace"];
  };
  "/workspace/{id}/unshare": {
    post: operations["workspaceUnshareWorkspace"];
  };
  "/workspace-instance/active-workspaces": {
    get: operations["workspaceInstanceGetActiveWorkspaceInstanceCount"];
  };
  "/workspace-instance/{id}/start": {
    post: operations["workspaceInstanceStartWorkspaceInstance"];
  };
  "/workspace-instance/{id}/stop": {
    post: operations["workspaceInstanceStopWorkspaceInstance"];
  };
  "/team/{id}/invite/{invitationId}/accept": {
    post: operations["teamAcceptTeamInvitation"];
  };
  "/team": {
    get: operations["teamGetTeams"];
    post: operations["teamCreateTeam"];
  };
  "/team/{id}/invitation": {
    get: operations["teamGetTeamInvitations"];
    post: operations["teamCreateTeamInvitation"];
  };
  "/team/{id}/subscriptions": {
    get: operations["teamGetTeamSubscriptionList"];
    post: operations["teamCreateTeamSubscription"];
  };
  "/team/{id}": {
    get: operations["teamGetTeam"];
    delete: operations["teamDeleteTeam"];
    patch: operations["teamUpdateTeam"];
  };
  "/team/{id}/subscriptions/{subscriptionId}/disable": {
    post: operations["teamDisableTeamSubscription"];
  };
  "/team/{id}/subscriptions/{subscriptionId}/enable": {
    post: operations["teamEnableTeamSubscription"];
  };
  "/team/{id}/subscriptions/active": {
    get: operations["teamGetActiveTeamSubscription"];
  };
  "/team/invitations": {
    get: operations["teamGetInvitations"];
  };
  "/team/invitations/count": {
    get: operations["teamGetInvitationsCount"];
  };
  "/team/{id}/users": {
    get: operations["teamGetTeamUsers"];
  };
  "/team/{id}/leave": {
    delete: operations["teamLeaveTeam"];
  };
  "/team/{id}/invite/{invitationId}/reject": {
    post: operations["teamRejectTeamInvitation"];
  };
  "/team/{id}/invitation/{invitationId}": {
    delete: operations["teamRemoveTeamInvitation"];
  };
  "/team/{id}/users/{userId}": {
    put: operations["teamSetUserTeamRole"];
    delete: operations["teamRemoveUserFromTeam"];
  };
  "/team/{id}/subscriptions/{subscriptionId}": {
    put: operations["teamUpdateTeamSubscription"];
  };
  "/plan": {
    get: operations["planGetPlans"];
    post: operations["planCreatePlan"];
  };
  "/plan/{planId}": {
    get: operations["planGetPlan"];
    put: operations["planUpdatePlan"];
    delete: operations["planDeletePlan"];
  };
  "/workspace-usage/credits": {
    get: operations["workspaceUsageGetSpentCredits"];
  };
  "/workspace-usage": {
    get: operations["workspaceUsageGetWorkspaceUsageList"];
  };
  "/workspace-usage/periods": {
    get: operations["workspaceUsageGetWorkspaceUsagePeriodList"];
  };
  "/workspace-ssh/{id}": {
    get: operations["workspaceSshGetWorkspaceDetails"];
  };
  "/workspace-ssh/{id}/keep-alive": {
    post: operations["workspaceSshReceiveKeepAliveSignalFromSsh"];
  };
  "/workspace-ssh/{id}/validate/public-key": {
    get: operations["workspaceSshValidatePublicKey"];
  };
  "/workspace-ssh/{id}/validate/ssh-token": {
    get: operations["workspaceSshValidateSshToken"];
  };
  "/supervisor/git-credentials": {
    get: operations["supervisorGetGitCredentials"];
  };
  "/supervisor/state": {
    get: operations["supervisorGetInstanceState"];
    post: operations["supervisorSetState"];
  };
  "/supervisor/user-config": {
    get: operations["supervisorGetUserConfig"];
  };
  "/supervisor/config": {
    get: operations["supervisorGetWorkspaceInstanceConfig"];
  };
  "/supervisor/keep-alive": {
    post: operations["supervisorReceiveKeepAliveSignal"];
  };
  "/supervisor/error": {
    post: operations["supervisorSetError"];
  };
  "/supervisor/git-status": {
    post: operations["supervisorSetGitStatus"];
  };
  "/supervisor/user/environment-variables": {
    get: operations["supervisorSupervisorGetUserEnvironmentVariableList"];
    post: operations["supervisorSupervisorCreateUserEnvironmentVariable"];
  };
  "/supervisor/user/environment-variables/{name}": {
    put: operations["supervisorSupervisorUpdateUserEnvironmentVariable"];
    delete: operations["supervisorSupervisorDeleteUserEnvironmentVariable"];
  };
  "/supervisor/cluster": {
    get: operations["supervisorSupervisorGetClusters"];
  };
  "/supervisor/team": {
    get: operations["supervisorSupervisorGetTeams"];
  };
  "/supervisor/workspace/{id}": {
    get: operations["supervisorSupervisorGetWorkspace"];
  };
  "/supervisor/workspace": {
    get: operations["supervisorSupervisorGetWorkspaceList"];
  };
  "/supervisor/workspace/{id}/pin": {
    post: operations["supervisorSupervisorPinWorkspace"];
  };
  "/supervisor/workspace/{id}/share": {
    post: operations["supervisorSupervisorShareWorkspace"];
  };
  "/supervisor/workspace-instance/{id}/start": {
    post: operations["supervisorSupervisorStartWorkspaceInstance"];
  };
  "/supervisor/workspace-instance/{id}/stop": {
    post: operations["supervisorSupervisorStopWorkspaceInstance"];
  };
  "/supervisor/workspace/{id}/unpin": {
    post: operations["supervisorSupervisorUnpinWorkspace"];
  };
  "/supervisor/workspace/{id}/unshare": {
    post: operations["supervisorSupervisorUnshareWorkspace"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Cluster: {
      /** @description Domain */
      domain: string;
      id: string;
      /** @description Name */
      name: string;
      /**
       * @description Region
       * @enum {string}
       */
      region?: "us" | "eu" | "asia" | "local";
    };
    ClusterCreation: {
      /** @description Cluster config */
      config: string;
      /** @description Domain */
      domain: string;
      /** @description Name */
      name: string;
      /**
       * @description Region
       * @enum {string}
       */
      region: "us" | "eu" | "asia" | "local";
    };
    ClusterList: {
      items: components["schemas"]["Cluster"][];
      total: number;
    };
    EnvironmentVariableCreation: {
      /** @description Name */
      name: string;
      /** @description Value */
      value: string;
    };
    PublicSSHKeyCreation: {
      /**
       * Format: date-time
       * @description Expires at
       */
      expiresAt?: string;
      /**
       * @description SSH key name
       * @example My SSH key
       */
      name: string;
      /** @description SSH key value */
      publicKey: string;
    };
    User: {
      /** @description AvatarUrl */
      avatarUrl?: string;
      /** @description User account disabled flag */
      disabled?: boolean;
      /** @description Id */
      id: string;
      /** @description Marked for deletion */
      markedForDeletion?: boolean;
      preferences: components["schemas"]["UserPreferences"];
      /** @description Primary email */
      primaryEmail: string;
      /** @description Public SSH Key */
      publicSSHKey: string;
      /** @description Name */
      username: string;
    };
    UserPreferences: {
      /**
       * @description Default IDE
       * @enum {string}
       */
      defaultIde: "browser" | "vscode" | "jetbrains-iu" | "jetbrains-ic" | "jetbrains-ps" | "jetbrains-ws" | "jetbrains-py" | "jetbrains-pc" | "jetbrains-rm" | "jetbrains-cl" | "jetbrains-go" | "jetbrains-rd";
      /** @description Dotfiles repository URL */
      dotfilesRepositoryUrl?: string;
    };
    EnvironmentVariable: {
      /** @description Name */
      name: string;
      /** @description Value */
      value: string;
    };
    GitNamespace: {
      id: string;
      name: string;
      personal?: boolean;
      provider: string;
    };
    GitRepositoryList: {
      items: components["schemas"]["GitRepository"][];
      total: number;
    };
    GitRepository: {
      fullName: string;
      htmlUrl: string;
      name: string;
    };
    PublicSSHKey: {
      /**
       * Format: date-time
       * @description Added at
       */
      addedAt: string;
      /**
       * Format: date-time
       * @description Expires at
       */
      expiresAt?: string;
      /** @description Id */
      id: string;
      /**
       * @description SSH key name
       * @example My SSH key
       */
      name: string;
    };
    UserUpdateDefaultIde: {
      /**
       * @description Default IDE
       * @enum {string}
       */
      defaultIde: "browser" | "vscode" | "jetbrains-iu" | "jetbrains-ic" | "jetbrains-ps" | "jetbrains-ws" | "jetbrains-py" | "jetbrains-pc" | "jetbrains-rm" | "jetbrains-cl" | "jetbrains-go" | "jetbrains-rd";
    };
    UserUpdateDotfilesRepositoryUrl: {
      /** @description Dotfiles repository URL */
      dotfilesRepositoryUrl?: string;
    };
    EnvironmentVariableUpdate: {
      /** @description Name */
      name: string;
      /** @description Value */
      value: string;
    };
    Workspace: {
      /** Format: date-time */
      createdAt: string;
      createdFromTemplate: boolean;
      destroyed: boolean;
      error?: string;
      errorLog?: string;
      gitContext?: components["schemas"]["GitContext"];
      gitStatus?: components["schemas"]["WorkspaceGitStatus"];
      id: string;
      pinned: boolean;
      shared: boolean;
      sshAccessToken?: string;
      teamId: string;
      /** Format: date-time */
      updatedAt: string;
      userId: string;
      version: number;
      workspaceInstance: components["schemas"]["WorkspaceInstance"];
    };
    GitContext: {
      /** @description The branch of the repository */
      branch?: string;
      /** @description The clone url of the repository */
      cloneUrl: string;
      /** @description Has devcontainer config */
      hasDevContainerConfig: boolean;
      /** @description The owner of the repository */
      owner: string;
      /** @description The path of the repository */
      path?: string;
      /** @description The pull request number of the repository */
      prNumber?: number;
      /** @description The id of the git provider */
      providerId: string;
      /** @description The name of the repository */
      repo: string;
      /** @description The current commit sha of the repository */
      sha: string;
      /** @description The source of the repository */
      source: string;
      /** @description The web url of the repository */
      webUrl: string;
    };
    WorkspaceGitStatus: {
      ahead: number;
      behind: number;
      current?: string;
      detached: boolean;
      files: components["schemas"]["WorkspaceFileStatus"][];
      tracking?: string;
    };
    WorkspaceFileStatus: {
      /** @description Original location of the file, when the file has been moved */
      from?: string;
      /** @description First digit of the status code of the file, e.g. 'M' = modified. Represents the status of the index if no merge conflicts, otherwise represents status of one side of the merge. */
      index?: string;
      /** @description Path of the file */
      path?: string;
      /** @description Second digit of the status code of the file. Represents status of the working directory if no merge conflicts, otherwise represents status of other side of a merge. */
      workingDir?: string;
    };
    WorkspaceInstance: {
      /** @enum {string} */
      className: "kata" | "sysbox" | "default";
      clusterId: string;
      /** Format: date-time */
      createdAt: string;
      error?: string;
      errorLog?: string;
      id: string;
      /** Format: date-time */
      lastKeepAliveSignal: string;
      /** Format: date-time */
      startedAt?: string;
      /** @enum {string} */
      state: "none" | "initializing" | "pendingArchive" | "archiving" | "archived" | "pendingCreate" | "creating" | "created" | "pendingRestore" | "restoring" | "restored" | "pendingStop" | "stopping" | "stopped" | "pendingStart" | "starting" | "started" | "pendingDestroy" | "destroying" | "destroyed" | "error";
      /** Format: date-time */
      stoppedAt?: string;
      token: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
      workspaceId?: string;
    };
    WorkspaceFromGitRepositoryUrlCreation: {
      /** @description Cluster id */
      clusterId?: string;
      /** @description Is the workspace created from a template? */
      createdFromTemplate?: boolean;
      /** @description Git repository url */
      gitRepositoryUrl: string;
      /** @description Workspace team id */
      teamId: string;
    };
    WorkspaceList: {
      items: components["schemas"]["Workspace"][];
      total: number;
    };
    ActiveWorkspaceCount: {
      /** @description Active workspace count */
      count: number;
    };
    Team: {
      /** @description Team has active subscription */
      hasActiveSubscription: boolean;
      id: string;
      /** @description Name */
      name: string;
      /** @description Private members */
      privateMembers: boolean;
    };
    TeamCreation: {
      /** @description Name */
      name: string;
    };
    TeamInvitationCreation: {
      /**
       * Format: email
       * @description Email
       */
      email: string;
      /**
       * Format: date-time
       * @description Expires at
       */
      expiresAt?: string;
    };
    SubscriptionCreation: {
      /**
       * @description Disabled
       * @default false
       */
      disabled?: boolean;
      /**
       * Format: date-time
       * @description End
       */
      end?: string;
      /** @description Subscription ID */
      id?: string;
      /** @description Plan id */
      planId: string;
      /** @description Max team members */
      seats: number;
      /**
       * Format: date-time
       * @description Start
       */
      start?: string;
    };
    Subscription: {
      /** @description Disabled */
      disabled: boolean;
      /**
       * Format: date-time
       * @description End
       */
      end?: string;
      id: string;
      plan: components["schemas"]["Plan"];
      /** @description Max team members */
      seats: number;
      /**
       * Format: date-time
       * @description Start
       */
      start: string;
      /** @description Team id */
      teamId: string;
    };
    Plan: {
      /** @description Build credits */
      buildCredits: number;
      /** @description Workspace credits */
      credits: number;
      id: string;
      /** @description Inactivity timeout in minutes */
      inactivityTimeoutInMinutes: number;
      /** @description Name */
      name: string;
      /** @description Parallel builds */
      parallelBuilds: number;
      /** @description Parallel workspaces */
      parallelWorkspaces: number;
      /** @description Limit of pinned workspaces */
      pinnedWorkspaces: number;
    };
    TeamInvitation: {
      /** Format: email */
      email: string;
      /** Format: date-time */
      expiresAt: string;
      /** @description Invitation Id */
      id: string;
      /** @description Team Id */
      teamId: string;
      /** @description Team name */
      teamName: string;
      /** @description Team owner username */
      teamOwnerUsername?: string;
    };
    TeamInvitationCount: {
      /** @description Team invitation count */
      count: number;
    };
    TeamUser: {
      /** @description AvatarUrl */
      avatarUrl?: string;
      /** @description User account disabled flag */
      disabled?: boolean;
      /** @description Primary email */
      primaryEmail: string;
      /**
       * Format: date-time
       * @description Suspended until
       */
      suspendedUntil?: string;
      /** @description Suspension reason */
      suspensionReason?: string;
      /** @enum {string} */
      teamRole: "owner" | "admin" | "member";
      /** @description User id */
      userId: string;
      /** @description Name */
      username: string;
    };
    TeamUserRoleUpdate: {
      /**
       * @description Team role
       * @enum {string}
       */
      teamRole: "owner" | "admin" | "member";
    };
    TeamUpdate: {
      /** @description Team name */
      name?: string;
    };
    SubscriptionUpdate: {
      /**
       * Format: date-time
       * @description End
       */
      end?: string;
      /** @description Plan id */
      planId: string;
      /** @description Max team members */
      seats: number;
      /**
       * Format: date-time
       * @description Start
       */
      start: string;
    };
    PlanCreation: {
      /** @description Build credits */
      buildCredits: number;
      /** @description Workspace hours */
      credits: number;
      /** @description Id */
      id?: string;
      /** @description Inactivity timeout in minutes */
      inactivityTimeoutInMinutes: number;
      /** @description Name */
      name: string;
      /** @description Parallel builds */
      parallelBuilds: number;
      /** @description Parallel workspaces */
      parallelWorkspaces: number;
      /** @description Limit of pinned workspaces */
      pinnedWorkspaces: number;
    };
    PlanList: {
      items: components["schemas"]["Plan"][];
      total: number;
    };
    PlanUpdate: {
      /** @description Build credits */
      buildCredits: number;
      /** @description Workspace credits */
      credits: number;
      /** @description Inactivity timeout in minutes */
      inactivityTimeoutInMinutes: number;
      /** @description Name */
      name: string;
      /** @description Parallel builds */
      parallelBuilds: number;
      /** @description Parallel workspaces */
      parallelWorkspaces: number;
      /** @description Limit of pinned workspaces */
      pinnedWorkspaces: number;
    };
    WorkspaceUsageSpentCredit: {
      /** @description Credits spent per minute */
      credits: number;
    };
    WorkspaceUsageList: {
      items: components["schemas"]["WorkspaceUsage"][];
      total: number;
    };
    WorkspaceUsage: {
      /** @description Credits spent per minute */
      creditsSpentPerMinute: number;
      /** @description Team Id */
      teamId: string;
      /** @description Usage periods */
      usagePeriods: components["schemas"]["WorkspaceUsagePeriod"][];
      /** @description User Id */
      userId: string;
      /** @description Workspace Id */
      workspaceId: string;
    };
    WorkspaceUsagePeriod: {
      /** @description Credits spent per minute */
      creditsSpentPerMinute: number;
      /** @description Usage started at */
      startedAt: string;
      /** @description Usage stopped at */
      stoppedAt?: string;
      workspaceInfo: components["schemas"]["WorkspaceUsageWorkspaceInfo"];
    };
    WorkspaceUsageWorkspaceInfo: {
      /** @description Created from template? */
      createdFromTemplate: boolean;
      gitContext: components["schemas"]["GitContext"];
      /** @description Workspace ID */
      workspaceId: string;
    };
    WorkspaceUsagePeriodList: {
      items: components["schemas"]["WorkspaceUsagePeriod"][];
      total: number;
    };
    GitCredentials: {
      credentials: components["schemas"]["Credentials"];
      /** @description Email */
      email?: string;
      /** @description Username */
      username: string;
    };
    Credentials: {
      /** @description Username */
      username: string;
      /** @description Password */
      password: string;
    };
    WorkspaceInstanceStateDTO: {
      /** @enum {string} */
      state: "none" | "initializing" | "pendingArchive" | "archiving" | "archived" | "pendingCreate" | "creating" | "created" | "pendingRestore" | "restoring" | "restored" | "pendingStop" | "stopping" | "stopped" | "pendingStart" | "starting" | "started" | "pendingDestroy" | "destroying" | "destroyed" | "error";
    };
    UserConfig: {
      /** @description Dotfiles repository URL */
      dotfilesRepositoryUrl?: string;
      /** @description Primary email */
      primaryEmail?: string;
      environmentVariables: components["schemas"]["EnvironmentVariable"][];
    };
    WorkspaceInstanceConfig: {
      /** @description Created from template */
      createdFromTemplate: boolean;
      /** @description Domain */
      domain: string;
      gitContext: components["schemas"]["GitContext"];
      gitCredentials: components["schemas"]["GitCredentials"];
      /** @description Status page url */
      statusPageUrl: string;
      /** @description Workspace id */
      workspaceId: string;
    };
    WorkspaceInstanceError: {
      error: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  clusterGetClusters: {
    parameters: {
      query?: {
        clusterId?: string;
        name?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ClusterList"];
        };
      };
    };
  };
  clusterCreateCluster: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ClusterCreation"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Cluster"];
        };
      };
    };
  };
  clusterGetCluster: {
    parameters: {
      path: {
        clusterId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Cluster"];
        };
      };
    };
  };
  clusterDeleteCluster: {
    parameters: {
      path: {
        clusterId: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  userGetUserEnvironmentVariableList: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["EnvironmentVariable"][];
        };
      };
    };
  };
  userCreateUserEnvironmentVariable: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EnvironmentVariableCreation"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  userGetUserSshKeys: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["PublicSSHKey"][];
        };
      };
    };
  };
  userCreateUserSshKey: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PublicSSHKeyCreation"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  userGetUser: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  userDeleteUser: {
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  userUpdateUserEnvironmentVariable: {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EnvironmentVariableUpdate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  userDeleteUserEnvironmentVariable: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  userDeleteUserSshKey: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  userGetPublicSshKey: {
    responses: {
      /** @description Public Key */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  userGetUserGitNamespaces: {
    parameters: {
      path: {
        provider: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["GitNamespace"][];
        };
      };
    };
  };
  userGetUserGitRepos: {
    parameters: {
      query?: {
        personal?: boolean;
        offset?: number;
        limit?: number;
        query?: string;
      };
      path: {
        provider: string;
        namespaceId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["GitRepositoryList"];
        };
      };
    };
  };
  userUpdateUserDefaultIde: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserUpdateDefaultIde"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  userUpdateUserDotfilesRepositoryUrl: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UserUpdateDotfilesRepositoryUrl"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceGetWorkspaceList: {
    parameters: {
      query: {
        teamId: string;
        workspaceId?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceList"];
        };
      };
    };
  };
  workspaceCreateWorkspace: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["WorkspaceFromGitRepositoryUrlCreation"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  workspaceDestroyWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  workspaceGetWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  workspaceIsWorkspaceShared: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspacePinWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceShareWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceUnpinWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceUnshareWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceInstanceGetActiveWorkspaceInstanceCount: {
    parameters: {
      query: {
        teamId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ActiveWorkspaceCount"];
        };
      };
    };
  };
  workspaceInstanceStartWorkspaceInstance: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceInstanceStopWorkspaceInstance: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamAcceptTeamInvitation: {
    parameters: {
      path: {
        id: string;
        invitationId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamGetTeams: {
    parameters: {
      query?: {
        role?: "owner" | "admin" | "member";
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Team"][];
        };
      };
    };
  };
  teamCreateTeam: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TeamCreation"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  teamGetTeamInvitations: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TeamInvitation"][];
        };
      };
    };
  };
  teamCreateTeamInvitation: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamInvitationCreation"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamGetTeamSubscriptionList: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"][];
        };
      };
    };
  };
  teamCreateTeamSubscription: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionCreation"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamGetTeam: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  teamDeleteTeam: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  teamUpdateTeam: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamUpdate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamDisableTeamSubscription: {
    parameters: {
      path: {
        id: string;
        subscriptionId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamEnableTeamSubscription: {
    parameters: {
      path: {
        id: string;
        subscriptionId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamGetActiveTeamSubscription: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  teamGetInvitations: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TeamInvitation"][];
        };
      };
    };
  };
  teamGetInvitationsCount: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TeamInvitationCount"];
        };
      };
    };
  };
  teamGetTeamUsers: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["TeamUser"][];
        };
      };
    };
  };
  teamLeaveTeam: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  teamRejectTeamInvitation: {
    parameters: {
      path: {
        id: string;
        invitationId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  teamRemoveTeamInvitation: {
    parameters: {
      path: {
        id: string;
        invitationId: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  teamSetUserTeamRole: {
    parameters: {
      path: {
        id: string;
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamUserRoleUpdate"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  teamRemoveUserFromTeam: {
    parameters: {
      path: {
        id: string;
        userId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  teamUpdateTeamSubscription: {
    parameters: {
      path: {
        id: string;
        subscriptionId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SubscriptionUpdate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  planGetPlans: {
    parameters: {
      query?: {
        planId?: string;
        name?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["PlanList"];
        };
      };
    };
  };
  planCreatePlan: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlanCreation"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
  };
  planGetPlan: {
    parameters: {
      path: {
        planId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
  };
  planUpdatePlan: {
    parameters: {
      path: {
        planId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlanUpdate"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
  };
  planDeletePlan: {
    parameters: {
      path: {
        planId: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  workspaceUsageGetSpentCredits: {
    parameters: {
      query: {
        periodStart: string;
        workspaceId?: string;
        periodEnd?: string;
        teamId?: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUsageSpentCredit"];
        };
      };
    };
  };
  workspaceUsageGetWorkspaceUsageList: {
    parameters: {
      query?: {
        teamId?: string;
        workspaceId?: string;
        periodStart?: string;
        periodEnd?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUsageList"];
        };
      };
    };
  };
  workspaceUsageGetWorkspaceUsagePeriodList: {
    parameters: {
      query?: {
        teamId?: string;
        workspaceId?: string;
        periodStart?: string;
        periodEnd?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUsagePeriodList"];
        };
      };
    };
  };
  workspaceSshGetWorkspaceDetails: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  workspaceSshReceiveKeepAliveSignalFromSsh: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceSshValidatePublicKey: {
    parameters: {
      query?: {
        algo?: string;
        blob?: string;
        data?: string;
        signature?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  workspaceSshValidateSshToken: {
    parameters: {
      query?: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorGetGitCredentials: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["GitCredentials"];
        };
      };
    };
  };
  supervisorGetInstanceState: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceInstanceStateDTO"];
        };
      };
    };
  };
  supervisorSetState: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceInstanceStateDTO"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorGetUserConfig: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["UserConfig"];
        };
      };
    };
  };
  supervisorGetWorkspaceInstanceConfig: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceInstanceConfig"];
        };
      };
    };
  };
  supervisorReceiveKeepAliveSignal: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSetError: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceInstanceError"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSetGitStatus: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceGitStatus"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorGetUserEnvironmentVariableList: {
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["EnvironmentVariable"][];
        };
      };
    };
  };
  supervisorSupervisorCreateUserEnvironmentVariable: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EnvironmentVariableCreation"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorUpdateUserEnvironmentVariable: {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EnvironmentVariableUpdate"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorDeleteUserEnvironmentVariable: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  supervisorSupervisorGetClusters: {
    parameters: {
      query?: {
        clusterId?: string;
        name?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["ClusterList"];
        };
      };
    };
  };
  supervisorSupervisorGetTeams: {
    parameters: {
      query?: {
        role?: "owner" | "admin" | "member";
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Team"][];
        };
      };
    };
  };
  supervisorSupervisorGetWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  supervisorSupervisorGetWorkspaceList: {
    parameters: {
      query: {
        teamId: string;
        workspaceId?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceList"];
        };
      };
    };
  };
  supervisorSupervisorPinWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorShareWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorStartWorkspaceInstance: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorStopWorkspaceInstance: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorUnpinWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  supervisorSupervisorUnshareWorkspace: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
}
