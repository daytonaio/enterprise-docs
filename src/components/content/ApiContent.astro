---
import type { Root, ApiEndpoint } from '../../util/api-type'
import { apiSchema as schema } from '../../util/fetch'
import ResponseCard from '../cards/ResponseCard.astro'
import ParameterCard from '../cards/ParameterCard.astro'
import OperationIdCard from '../cards/OperationIdCard.astro'
import TagCard from '../cards/TagCard.astro'
import RequestBodyCard from '../cards/RequestBodyCard.astro'
import { Icon } from '@astrojs/starlight/components'
import type { operations } from '../../util/generated-types'
import SecurityCard from '@components/cards/SecurityCard.astro'

interface Props {
  routeGroup: string
}
const paths = Object.keys(schema['paths']) as unknown as (keyof Root['paths'])[]

const { routeGroup}: Props = Astro.props

const routes = paths.filter(route =>  
   route.split("/")[1] === routeGroup
  )
---
<!-- This throw red squiggle, it is caused by alpine, but it works -->
<div>
  {
    routes.map(path => {
      const group = path.split('/')[1]
      const key = path
      // this return the methods like get, post, put, delete
      const methods = Object.keys(schema.paths[path])
      return (
        <>
          <div class="api-card">
            {methods.map(method => {
              const properties = schema.paths[path][method]

              return (
                <div
                  class="method-card"
                  x-data="{
    open: false,
    get isOpen() { return this.open },
    toggle() { this.open = ! this.open },
}"
                >
                  <div class="api-header" @click="toggle()">
                    <div class="api-header-left">
                      <div class="method" data-method={method.toUpperCase()}>
                        {method.toUpperCase()}
                      </div>

                      <div class="route">{path}</div>
                    </div>
                    <div
                      class="api-header-icon"
                     :class="open ? 'rotate-180' : 'rotate-0'"
                     
                    >
                      <Icon name="down-caret" size="2rem" />
                    </div>
                  </div>
                  <div
                    class="api-body"
                    x-show="isOpen"
                    @click.outside="open = false"
                  >
                    {Object.keys(properties).map(property => {
                      const value = properties[property]

                      return (
                        <div class="api-content" data-type={property}>
                          {property === 'responses' ? (
                            <ResponseCard
                            method={method}
                            route={path}
                              property={property}
                            />
                          ) : property == 'parameters' ? (
                            <ParameterCard value={value} property={property} />
                          ) : property === 'requestBody' ? (
                            <RequestBodyCard
                              schema={schema}
                              value={value}
                              property={property}
                            />
                          ) : property === 'operationId' ? (
                            <OperationIdCard
                              value={value}
                              property={property}
                            />
                          ) : property === "security" ? 
                          <SecurityCard value={value} property={property} />
                          : (
                            <TagCard value={value} property={property} />
                          )}
                        </div>
                      )
                    })}
                  </div>
                </div>
              )
            })}
          </div>
        </>
      )
    })
  }
</div>
