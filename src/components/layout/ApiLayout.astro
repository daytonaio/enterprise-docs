---
import type { Root, ApiEndpoint } from '../../util/api-type'
import ParameterCard from '../cards/ParameterCard.astro'
import { Schema } from '../../util/api'
import ResponseCard from '@components/cards/ResponseCard.astro'
// const Schema = await fetch('https://api.cde.agency/v3/docs/swagger.json')
//   .then(res => res.json() as Promise<Root>)
//   .catch(err => console.error(err))
const paths = Object.keys(Schema.paths) as unknown as [keyof Root['paths']]
---

<div>
  {
    paths.map(path => {
      const group = path.split('/')[1]
      const key = path
      // this return the methods like get, post, put, delete
      const methods = Object.keys(Schema.paths[path])
      return (
        <>
          <div class="api-card">
            {methods.map(method => {
              const properties = Schema.paths[path][method]

              return (
                <div class="method-card">
                  <div class="api-header">
                    <div class="method" data-method={method.toUpperCase()}>
                      {method.toUpperCase()}
                    </div>

                    <div class="route">{path}</div>
                  </div>
                  <div class="two-column">
                    {Object.keys(properties).map(property => {
                      const value = properties[property]

                      return (
                        <div class="api-content" data-type={property}>
                          <div class="property">
                            {property.split('')[0].toUpperCase() +
                              property.slice(1)}
                            :
                          </div>
                          <div class="value">
                            {property === 'responses' ? (
                              <ResponseCard value={value} />
                            ) : property == 'parameters' ? (
                              <ParameterCard value={value} />
                            ) : property === 'requestBody' ? (
                              <div>Some request body here</div>
                            ) : value === null ||
                              value === undefined ||
                              value.length < 1 ? (
                              <span>NaN</span>
                            ) : (
                              value
                            )}
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )
            })}
          </div>
        </>
      )
    })
  }
</div>
