---
import ApiPropertyCardTitle from './ApiPropertyCardTitle.astro'
import { Sample } from '../../util/sample'
import type { operations, paths } from 'src/util/generated-api-type'
import type { Root } from 'src/util/api-type'
interface Props {
  value: any
  Schema: Root
  property: string
}

const { value, property, Schema }: Props = Astro.props

const isCodeTwoHundre = value['200']
const isCodeTwoHundreOne = value['201']
const isCodeTwoHundreFour = value['204']

// recursively look for "ref" in an object and look get its value, if none return null

function stringSchema(schema: paths) {
  const schemaKeys = Object.keys(schema)
  const schemaValue = Object.values(schema)
  console.log('schemaValue', schemaValue)

  Object.entries(Object.values(schema)).map(item => {
    const response = Object.values(item[1]).map(data => {
      // console.log('data', data, 'typeof data', typeof data)
      const isContentExists = Object.keys(data['responses']).map(code => {
        // console.log('code', code, 'data', data['responses'][code])
        const content = Object.values(data['responses'][code])[0][
          'application/json'
        ]
          ? Object.values(data['responses'][code])[0]['application/json'][
              'schema'
            ]
          : Object.values(data['responses'][code])[0]['*/*']
            ? Object.values(data['responses'][code])[0]['*/*']['schema']
            : Object.values(data['responses'][code])[0]

        const result = content
          ? content['$ref']
            ? content['$ref'].split('/')[3]
            : content['items']
              ? content['items']['$ref'].split('/')[3]
              : content === 'No Content'
                ? data['responses'][code]
                : content
          : content
      })
      // console.log('isContentExists', isContentExists)
    })
  })
}

stringSchema(Sample)
---

<>
  <ApiPropertyCardTitle property={property} />
  <div class="value">
    {
      value ? (
        <div class="children-body">
          <pre>{JSON.stringify(value, null, 2)}</pre>
        </div>
      ) : (
        'null'
      )
    }
  </div>
</>
