---
import hljs from 'highlight.js'
interface Props {
  value: any
  Schema?: any
  property: string
}

const { value, property, Schema }: Props = Astro.props

// validate if the value of the item is an object
function isObject(item) {
  if (typeof item === 'object' && item !== null && !Array.isArray(item)) {
    return true
  }
  return false
}

function findRef(obj) {
  for (let key in obj) {
    if (isObject(obj[key])) {
      findRef(obj[key])
    } else {
      if (key === '$ref') {
        console.log('ref', obj[key])
        return obj[key]
      }
    }
    console.log('obj[key]', obj[key])
  }
  return obj
}
// getting response body schema
const schema = Object.keys(value).map(key => {
  // example content: [ { 'application/json': { schema: [Object] } } ]
  const content = Object.values(value[key]).map(item => {
    findRef(item)
  })
})

console.log('--------------end of execution------------------')
---

<>
  <div class="property">
    {property.split('')[0].toUpperCase() + property.slice(1)}
    :
  </div>
  <div class="value">
    {
      value !== null && value !== undefined
        ? Object.entries(value).map(code => {
            return (
              <div class="response-content">
                <pre>
                  {JSON.stringify(code, null, 2)
                    .replace('[', '{')
                    .replace(']', '}')
                    .trim()}
                </pre>
              </div>
            )
          })
        : 'null'
    }
  </div>
</>
